  0%|                                                                        | 0/1125 [00:00<?, ?it/s]/root/miniconda3/lib/python3.12/site-packages/torch/utils/checkpoint.py:86: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn(
  9%|█████▎                                                      | 100/1125 [13:37<2:20:13,  8.21s/it]/root/miniconda3/lib/python3.12/site-packages/torch/utils/checkpoint.py:86: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
{'loss': 3.2651, 'grad_norm': 25.05304718017578, 'learning_rate': 0.0004982222222222223, 'epoch': 0.01}
{'loss': 3.1052, 'grad_norm': 22.72791862487793, 'learning_rate': 0.000496, 'epoch': 0.03}
{'loss': 2.8111, 'grad_norm': 23.823219299316406, 'learning_rate': 0.0004937777777777778, 'epoch': 0.04}
{'loss': 2.383, 'grad_norm': 13.89306354522705, 'learning_rate': 0.0004915555555555556, 'epoch': 0.05}
{'loss': 2.6656, 'grad_norm': 20.051002502441406, 'learning_rate': 0.0004893333333333334, 'epoch': 0.07}
{'loss': 2.4264, 'grad_norm': 17.0301570892334, 'learning_rate': 0.0004871111111111111, 'epoch': 0.08}
{'loss': 2.4006, 'grad_norm': 20.570981979370117, 'learning_rate': 0.00048488888888888887, 'epoch': 0.09}
{'loss': 2.2622, 'grad_norm': 18.364521026611328, 'learning_rate': 0.00048266666666666667, 'epoch': 0.11}
{'loss': 2.4461, 'grad_norm': 22.843229293823242, 'learning_rate': 0.0004804444444444445, 'epoch': 0.12}
{'loss': 2.1293, 'grad_norm': 22.607030868530273, 'learning_rate': 0.0004782222222222222, 'epoch': 0.13}
{'loss': 2.1674, 'grad_norm': 24.365137100219727, 'learning_rate': 0.00047599999999999997, 'epoch': 0.15}
{'loss': 2.2285, 'grad_norm': 22.224411010742188, 'learning_rate': 0.0004737777777777778, 'epoch': 0.16}
{'loss': 2.6009, 'grad_norm': 25.171157836914062, 'learning_rate': 0.0004715555555555556, 'epoch': 0.17}
{'loss': 2.2981, 'grad_norm': 13.473055839538574, 'learning_rate': 0.0004693333333333333, 'epoch': 0.19}
{'loss': 2.7024, 'grad_norm': 22.555591583251953, 'learning_rate': 0.0004671111111111111, 'epoch': 0.2}
{'loss': 2.0758, 'grad_norm': 21.1602840423584, 'learning_rate': 0.0004648888888888889, 'epoch': 0.21}
{'loss': 2.2649, 'grad_norm': 26.57817268371582, 'learning_rate': 0.0004626666666666667, 'epoch': 0.23}
{'loss': 2.0482, 'grad_norm': 20.24994468688965, 'learning_rate': 0.0004604444444444444, 'epoch': 0.24}
{'loss': 2.205, 'grad_norm': 20.687679290771484, 'learning_rate': 0.0004582222222222222, 'epoch': 0.25}
{'loss': 2.1852, 'grad_norm': 22.66913604736328, 'learning_rate': 0.000456, 'epoch': 0.27}
  warnings.warn(
 18%|██████████▋                                                 | 200/1125 [28:04<2:07:30,  8.27s/it]/root/miniconda3/lib/python3.12/site-packages/torch/utils/checkpoint.py:86: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
{'loss': 2.3141, 'grad_norm': 18.440078735351562, 'learning_rate': 0.0004537777777777778, 'epoch': 0.28}
{'loss': 2.2735, 'grad_norm': 20.633098602294922, 'learning_rate': 0.0004515555555555556, 'epoch': 0.29}
{'loss': 1.9588, 'grad_norm': 14.391412734985352, 'learning_rate': 0.0004493333333333333, 'epoch': 0.31}
{'loss': 2.2501, 'grad_norm': 20.954545974731445, 'learning_rate': 0.0004471111111111111, 'epoch': 0.32}
{'loss': 1.9693, 'grad_norm': 14.658404350280762, 'learning_rate': 0.00044488888888888887, 'epoch': 0.33}
{'loss': 2.1354, 'grad_norm': 17.62063980102539, 'learning_rate': 0.0004426666666666667, 'epoch': 0.35}
{'loss': 2.103, 'grad_norm': 16.47683334350586, 'learning_rate': 0.0004404444444444445, 'epoch': 0.36}
{'loss': 1.9476, 'grad_norm': 14.007749557495117, 'learning_rate': 0.0004382222222222222, 'epoch': 0.37}
{'loss': 1.9665, 'grad_norm': 12.793397903442383, 'learning_rate': 0.000436, 'epoch': 0.39}
{'loss': 2.2295, 'grad_norm': 18.815563201904297, 'learning_rate': 0.0004337777777777778, 'epoch': 0.4}
{'loss': 2.2542, 'grad_norm': 19.192062377929688, 'learning_rate': 0.0004315555555555556, 'epoch': 0.41}
{'loss': 2.1389, 'grad_norm': 22.011032104492188, 'learning_rate': 0.0004293333333333334, 'epoch': 0.43}
{'loss': 2.168, 'grad_norm': 16.76683807373047, 'learning_rate': 0.0004271111111111111, 'epoch': 0.44}
{'loss': 1.8669, 'grad_norm': 19.026403427124023, 'learning_rate': 0.0004248888888888889, 'epoch': 0.45}
{'loss': 1.9843, 'grad_norm': 14.24121379852295, 'learning_rate': 0.0004226666666666667, 'epoch': 0.47}
{'loss': 1.9132, 'grad_norm': 23.63320541381836, 'learning_rate': 0.0004204444444444445, 'epoch': 0.48}
{'loss': 1.9032, 'grad_norm': 20.246665954589844, 'learning_rate': 0.0004182222222222222, 'epoch': 0.49}
{'loss': 2.0632, 'grad_norm': 25.641887664794922, 'learning_rate': 0.000416, 'epoch': 0.51}
{'loss': 1.9163, 'grad_norm': 16.397520065307617, 'learning_rate': 0.00041377777777777783, 'epoch': 0.52}
{'loss': 2.1529, 'grad_norm': 16.755430221557617, 'learning_rate': 0.0004115555555555556, 'epoch': 0.53}
  warnings.warn(
 27%|████████████████                                            | 300/1125 [42:36<1:54:09,  8.30s/it]/root/miniconda3/lib/python3.12/site-packages/torch/utils/checkpoint.py:86: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
{'loss': 2.3258, 'grad_norm': 26.425819396972656, 'learning_rate': 0.0004093333333333333, 'epoch': 0.55}
{'loss': 1.8528, 'grad_norm': 19.253938674926758, 'learning_rate': 0.0004071111111111111, 'epoch': 0.56}
{'loss': 2.0344, 'grad_norm': 25.758317947387695, 'learning_rate': 0.00040488888888888893, 'epoch': 0.57}
{'loss': 1.9165, 'grad_norm': 12.213748931884766, 'learning_rate': 0.0004026666666666667, 'epoch': 0.59}
{'loss': 2.4234, 'grad_norm': 17.509824752807617, 'learning_rate': 0.0004004444444444444, 'epoch': 0.6}
{'loss': 1.7824, 'grad_norm': 27.651763916015625, 'learning_rate': 0.00039822222222222223, 'epoch': 0.61}
{'loss': 2.1628, 'grad_norm': 15.348459243774414, 'learning_rate': 0.00039600000000000003, 'epoch': 0.63}
{'loss': 2.1018, 'grad_norm': 21.185407638549805, 'learning_rate': 0.0003937777777777778, 'epoch': 0.64}
{'loss': 2.0244, 'grad_norm': 24.61397933959961, 'learning_rate': 0.0003915555555555556, 'epoch': 0.65}
{'loss': 2.1217, 'grad_norm': 19.224580764770508, 'learning_rate': 0.00038933333333333333, 'epoch': 0.67}
{'loss': 1.9595, 'grad_norm': 16.633745193481445, 'learning_rate': 0.00038711111111111113, 'epoch': 0.68}
{'loss': 1.9594, 'grad_norm': 16.853120803833008, 'learning_rate': 0.0003848888888888889, 'epoch': 0.69}
{'loss': 1.9247, 'grad_norm': 19.196897506713867, 'learning_rate': 0.0003826666666666667, 'epoch': 0.71}
{'loss': 1.8153, 'grad_norm': 17.061010360717773, 'learning_rate': 0.00038044444444444443, 'epoch': 0.72}
{'loss': 1.9647, 'grad_norm': 17.967601776123047, 'learning_rate': 0.00037822222222222223, 'epoch': 0.73}
{'loss': 1.8444, 'grad_norm': 24.744165420532227, 'learning_rate': 0.00037600000000000003, 'epoch': 0.75}
{'loss': 2.0378, 'grad_norm': 13.664959907531738, 'learning_rate': 0.0003737777777777778, 'epoch': 0.76}
{'loss': 1.9049, 'grad_norm': 13.114917755126953, 'learning_rate': 0.00037155555555555553, 'epoch': 0.77}
{'loss': 1.9417, 'grad_norm': 20.309864044189453, 'learning_rate': 0.00036933333333333333, 'epoch': 0.79}
{'loss': 1.9519, 'grad_norm': 13.422101974487305, 'learning_rate': 0.00036711111111111113, 'epoch': 0.8}
  warnings.warn(
 33%|████████████████████                                        | 375/1125 [53:42<1:48:36,  8.69s/it]Traceback (most recent call last):
{'loss': 1.8784, 'grad_norm': 10.924076080322266, 'learning_rate': 0.0003648888888888889, 'epoch': 0.81}
{'loss': 1.7454, 'grad_norm': 22.205244064331055, 'learning_rate': 0.0003626666666666667, 'epoch': 0.83}
{'loss': 2.0294, 'grad_norm': 15.567828178405762, 'learning_rate': 0.0003604444444444445, 'epoch': 0.84}
{'loss': 1.8534, 'grad_norm': 27.623258590698242, 'learning_rate': 0.00035822222222222223, 'epoch': 0.85}
{'loss': 2.0068, 'grad_norm': 17.885671615600586, 'learning_rate': 0.000356, 'epoch': 0.87}
{'loss': 2.0099, 'grad_norm': 16.64638328552246, 'learning_rate': 0.00035377777777777784, 'epoch': 0.88}
{'loss': 2.0288, 'grad_norm': 17.236133575439453, 'learning_rate': 0.0003515555555555556, 'epoch': 0.89}
{'loss': 1.9553, 'grad_norm': 15.568634986877441, 'learning_rate': 0.00034933333333333333, 'epoch': 0.91}
{'loss': 1.9861, 'grad_norm': 20.789989471435547, 'learning_rate': 0.0003471111111111111, 'epoch': 0.92}
{'loss': 1.7318, 'grad_norm': 12.635468482971191, 'learning_rate': 0.00034488888888888894, 'epoch': 0.93}
{'loss': 2.208, 'grad_norm': 18.564220428466797, 'learning_rate': 0.0003426666666666667, 'epoch': 0.95}
{'loss': 1.8735, 'grad_norm': 19.344877243041992, 'learning_rate': 0.00034044444444444443, 'epoch': 0.96}
{'loss': 1.9511, 'grad_norm': 17.43255615234375, 'learning_rate': 0.00033822222222222223, 'epoch': 0.97}
{'loss': 1.7817, 'grad_norm': 16.146390914916992, 'learning_rate': 0.00033600000000000004, 'epoch': 0.99}
{'loss': 1.9654, 'grad_norm': 15.016639709472656, 'learning_rate': 0.0003337777777777778, 'epoch': 1.0}
  File "/root/autodl-tmp/MLLM/jpeg-lm/classification_encoder_train.py", line 328, in <module>?, ?it/s]
    trainer.train()
  File "/root/miniconda3/lib/python3.12/site-packages/transformers/trainer.py", line 2240, in train
    return inner_training_loop(
           ^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/transformers/trainer.py", line 2656, in _inner_training_loop
    self._maybe_log_save_evaluate(
  File "/root/miniconda3/lib/python3.12/site-packages/transformers/trainer.py", line 3095, in _maybe_log_save_evaluate
    metrics = self._evaluate(trial, ignore_keys_for_eval)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/transformers/trainer.py", line 3044, in _evaluate
    metrics = self.evaluate(ignore_keys=ignore_keys_for_eval)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/transformers/trainer.py", line 4173, in evaluate
    output = eval_loop(
             ^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/transformers/trainer.py", line 4368, in evaluation_loop
    losses, logits, labels = self.prediction_step(model, inputs, prediction_loss_only, ignore_keys=ignore_keys)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/transformers/trainer.py", line 4584, in prediction_step
    loss, outputs = self.compute_loss(model, inputs, return_outputs=True)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/autodl-tmp/MLLM/jpeg-lm/classification_encoder_train.py", line 272, in compute_loss
    outputs = model(**inputs)
              ^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/accelerate/utils/operations.py", line 818, in forward
    return model_forward(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/accelerate/utils/operations.py", line 806, in __call__
    return convert_to_fp32(self.model_forward(*args, **kwargs))
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/amp/autocast_mode.py", line 44, in decorate_autocast
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/root/autodl-tmp/MLLM/jpeg-lm/models/jpeglm_encoder.py", line 111, in forward
    outputs = self.model(
              ^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/transformers/utils/generic.py", line 969, in wrapper
    output = func(self, *args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/transformers/models/llama/modeling_llama.py", line 453, in forward
    layer_outputs = decoder_layer(
                    ^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/transformers/modeling_layers.py", line 48, in __call__
    return super().__call__(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/transformers/models/llama/modeling_llama.py", line 308, in forward
    hidden_states, self_attn_weights = self.self_attn(
                                       ^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/transformers/models/llama/modeling_llama.py", line 265, in forward
    attn_output, attn_weights = attention_interface(
                                ^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/transformers/models/llama/modeling_llama.py", line 194, in eager_attention_forward
    attn_weights = attn_weights + causal_mask
                   ~~~~~~~~~~~~~^~~~~~~~~~~~~
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 1018.00 MiB. GPU 0 has a total capacity of 31.60 GiB of which 870.12 MiB is free. Process 763709 has 30.74 GiB memory in use. Of the allocated memory 28.54 GiB is allocated by PyTorch, and 1.90 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
